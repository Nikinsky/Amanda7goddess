# docker-compose.yml
version: '3.8'

services:
 backend:
   build:
     context: ./BackEnd
     dockerfile: Dockerfile
   volumes:
     - ./BackEnd:/app
     - ./BackEnd/staticfiles:/app/staticfiles  # Локальная директория для статики
     - ./BackEnd/media:/app/media  # Локальная директория для медиа
   environment:
     - DEBUG=${DEBUG}
     - SECRET_KEY=${SECRET_KEY}
     - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
     - SQL_ENGINE=${SQL_ENGINE}
     - SQL_DATABASE=${SQL_DATABASE}
     - SQL_USER=${SQL_USER}
     - SQL_PASSWORD=${SQL_PASSWORD}
     - SQL_HOST=${SQL_HOST}
     - SQL_PORT=${SQL_PORT}
     - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
   ports:
     - "8000:8000"
   command: sh -c "python manage.py collectstatic --no-input &&
                   python manage.py makemigrations &&
                   python manage.py migrate &&
                   echo \"from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('Amanda', 'amanda2025@example.com', 'amanda2025') if not User.objects.filter(username='Amanda').exists() else None\" | python manage.py shell &&
                   gunicorn --bind 0.0.0.0:8000 mysite.wsgi:application"
   depends_on:
     - db

 frontend:
   build:
     context: ./FrontEnd
     dockerfile: Dockerfile
   ports:
     - "3000:3000"

 nginx:
   build:
     context: ./nginx
   volumes:
     - ./BackEnd/staticfiles:/app/staticfiles
     - ./BackEnd/media:/app/media
   ports:
     - "80:80"
   depends_on:
     - backend
     - frontend

 db:
   image: postgres:13
   volumes:
     - postgres_data:/var/lib/postgresql/data
   environment:
     - POSTGRES_DB=${SQL_DATABASE}
     - POSTGRES_USER=${SQL_USER}
     - POSTGRES_PASSWORD=${SQL_PASSWORD}

volumes:
 postgres_data: